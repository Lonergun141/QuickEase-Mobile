import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
const IP = process.env.EXPO_PUBLIC_API_URL;

const BACKEND_DOMAIN = `https://quickease.xyz/quickease/api/v1`;

const axiosInstance = axios.create({
	baseURL: BACKEND_DOMAIN,
	headers: {
		'Content-Type': 'application/json',
	},
});

axiosInstance.interceptors.request.use(
	async (config) => {
		try {
			const user = await AsyncStorage.getItem('user');
			const parsedUser = JSON.parse(user);
			if (parsedUser && parsedUser.access) {
				config.headers['Authorization'] = `Bearer ${parsedUser.access}`;
			}
		} catch (error) {
			console.error('Error parsing user data:', error);
		}
		return config;
	},
	(error) => Promise.reject(error)
);

//post the generated quiz by openai to backend
export const createQuiz = async (noteId, quizData) => {
	try {
		// First, create the UserTest
		const testResponse = await axiosInstance.post(
			`${BACKEND_DOMAIN}/usertest-create/${noteId}/`,
			{}
		);

		console.log('dhahbdhasb', noteId);

		// Then, create questions and choices for each question
		for (const question of quizData) {
			const questionResponse = await axiosInstance.post(
				`${BACKEND_DOMAIN}/questions/create/${noteId}/`,
				{
					TestQuestion: question.TestQuestion,
				}
			);
			const questionId = questionResponse.data.id;

			// Create choices for the question
			for (const choice of question.choices) {
				await axiosInstance.post(`${BACKEND_DOMAIN}/usertest/choice-create/${questionId}/`, {
					item_choice_text: choice.item_choice_text,
					isAnswer: choice.isAnswer,
				});
			}
		}

		return noteId;
	} catch (error) {
		console.error('hala basaha:', {
			data: error.response.data,
			status: error.response.status,
			headers: error.response.headers,
		});
		throw error;
	}
};

//get all the quiz generated by the user
export const fetchAllQuiz = async () => {
	try {
		const response = await axiosInstance.get(`${BACKEND_DOMAIN}/usertests/`);
		return response.data;
	} catch (error) {
		console.error('Error fetching quiz:', error);
		throw error;
	}
};

//get quiz questions
export const fetchQuiz = async (noteId) => {
	try {
		const response = await axiosInstance.get(`${BACKEND_DOMAIN}/usertest/questions/${noteId}/`);
		return response.data;
	} catch (error) {
		if (error.response && error.response.status === 404) {
			return [];
		}

		throw error;
	}
};
//get fetch choices
export const fetchQuizChoices = async (questionId) => {
	try {
		const response = await axiosInstance.get(`${BACKEND_DOMAIN}/usertest/choices/${questionId}/`);
		return response.data;
	} catch (error) {
		console.error('Error fetching quiz choices:', error);
		throw error;
	}
};
//quiz submission
export const submitQuizAnswer = async (choiceId) => {
	try {
		const response = await axiosInstance.post(
			`${BACKEND_DOMAIN}/choice-answer/create/${choiceId}/`
		);
		return response.data;
	} catch (error) {
		console.error('Error submitting quiz answer:', error);
		throw error;
	}
};

// Fetch all existing answers for the note
export const fetchAllChoiceAnswersForNote = async (noteId) => {
	try {
		const response = await axiosInstance.get(`${BACKEND_DOMAIN}/answer-by-note/${noteId}/`);
		return response.data; // Returns an array of existing choice answers
	} catch (error) {
		console.error('Error fetching existing choice answers:', error);
		throw error;
	}
};

// Delete a single choice answer by its ID
export const deleteChoiceAnswer = async (choiceAnswerId) => {
	try {
		await axiosInstance.delete(`${BACKEND_DOMAIN}/choice-answer-detail/${choiceAnswerId}/`);
	} catch (error) {
		console.error('Error deleting choice answer:', error);
		throw error;
	}
};

// Delete all choice answers for a note
export const deleteAllChoiceAnswers = async (noteId) => {
	try {
		const existingAnswers = await fetchAllChoiceAnswersForNote(noteId);
		const deletePromises = existingAnswers.map((answer) => deleteChoiceAnswer(answer.answer));
		await Promise.all(deletePromises);
	} catch (error) {
		console.error('Error deleting all choice answers:', error);
		throw error;
	}
};

//gets the quiz results
export const fetchQuizResults = async (choiceId) => {
	try {
		const response = await axiosInstance.get(`${BACKEND_DOMAIN}/choice-answers/${choiceId}/`);
		return response.data;
	} catch (error) {
		console.error('Error fetching quiz results:', error);
		throw error;
	}
};
//if score already exists then it updates the current score
export const updateTestScore = async (noteId, score, total) => {
	try {
		const response = await axiosInstance.put(`${BACKEND_DOMAIN}/usertest-detail/${noteId}/`, {
			TestScore: score,
			TestTotalScore: total,
		});
		return response.data;
	} catch (error) {
		console.error('Error updating quiz results:', error);
		throw error;
	}
};

//review page data egt request
export const fetchQuizReviewData = async (noteId) => {
	try {
		// Step 1: Fetch test details
		const userTestResponse = await axiosInstance.get(
			`${BACKEND_DOMAIN}/usertest-detail/${noteId}/`
		);

		// Step 2: Fetch all questions for the note
		const questionsResponse = await axiosInstance.get(
			`${BACKEND_DOMAIN}/question-by-note/${noteId}/`
		);
		const questions = questionsResponse.data;

		// Step 3: Fetch choices per question and build choicesByQuestion mapping
		const choicesByQuestion = {};
		const choicesPromises = questions.map(async (question) => {
			const choicesResponse = await axiosInstance.get(
				`${BACKEND_DOMAIN}/usertest/choices/${question.id}/`
			);
			choicesByQuestion[question.id] = choicesResponse.data;
		});
		await Promise.all(choicesPromises);

		// Step 4: Fetch all answers related to the note
		const answersByNoteResponse = await axiosInstance.get(
			`${BACKEND_DOMAIN}/answer-by-note/${noteId}/`
		);

		return {
			userTest: userTestResponse.data,
			questions: questions,
			choicesByQuestion: choicesByQuestion,
			answersByNote: answersByNoteResponse.data,
		};
	} catch (error) {
		console.error('Error fetching quiz review data:', error);
		throw error;
	}
};

export const deleteQuiz = async (noteId) => {
	try {
		// Delete the UserTest record
		await axiosInstance.delete(`${BACKEND_DOMAIN}/usertest-detail/${noteId}/`);

		// Delete all answers associated with this note
		await deleteAllChoiceAnswers(noteId);

		return true;
	} catch (error) {
		console.error('Error deleting quiz:', error);
		throw error;
	}
};
